{{- $releaseName := .Release.Name -}}
{{- $deploymentName := include "deployment.fullname" . }}
{{- $configmapName := include "configmap.fullname" . }}
{{- $chartName := include "task-liberator.name" . -}}
{{- $cloudProviderFlavor := include "task-liberator.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "task-liberator.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "task-liberator.cloudProviderImagePullSecretName" . -}}
{{- if .Values.enabled -}}


{{ $sslSecretName := ternary .Values.authentication.ssl.externalSecretName (printf "%s%s" .Release.Name "-open-ssl") .Values.authentication.ssl.useExternal }}

{{- if .Values.authentication.ssl.enabled }}
{{- if and .Values.authentication.ssl.useExternal (not .Values.authentication.ssl.externalSecretName) }}
{{- fail "When using external ssl secret the value for .Values.authentication.ssl.externalSecretName should be set" }}
{{- end }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "task-liberator.environment" . }}
    release: {{ $releaseName }}
    {{- include "task-liberator.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "task-liberator.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "task-liberator.selectorLabels" . | nindent 8 }}
      {{- if .Values.resetOnConfigChange }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
    spec:
      {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
      {{- end }}
      volumes:
      {{- if .Values.global.ca.secretName }}
          - name: root-ca
            secret:
              secretName: {{ .Values.global.ca.secretName }}
          {{- end }}
          {{- if .Values.authentication.ssl.enabled }}
          - name: open-ssl
            secret:
              secretName: {{ $sslSecretName }}
          {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ .tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- if .Values.global.ca.secretName }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "[%s/%s]" .Values.global.ca.path .Values.global.ca.key | quote }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: {{ $configmapName }}
          volumeMounts: 
            {{- if .Values.global.ca.secretName }}
            - name: root-ca
              mountPath: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
              subPath: {{ quote .Values.global.ca.key }}
            {{- end }}
            {{- if .Values.authentication.ssl.enabled }}
            - name: open-ssl
              mountPath: "/etc/ssl/etc/ssl/openssl.cnf"
              subPath: "openssl.cnf"
            {{- end }}
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 16 }}
          {{- end }}
{{- end -}}
