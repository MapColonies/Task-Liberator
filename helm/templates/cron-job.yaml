{{- $releaseName := .Release.Name -}}
{{- $chartName := include "task-liberator.name" . -}}
{{- $cloudProviderFlavor := include "task-liberator.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "task-liberator.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "task-liberator.cloudProviderImagePullSecretName" . -}}
{{- if .Values.enabled -}}


{{ $caSecretName := ternary .Values.authentication.ca.externalSecretName (printf "%s%s" .Release.Name "-root-ca") .Values.authentication.ca.useExternal }}
{{ $sslSecretName := ternary .Values.authentication.ssl.externalSecretName (printf "%s%s" .Release.Name "-open-ssl") .Values.authentication.ssl.useExternal }}

{{- if .Values.authentication.ca.enabled }}
{{- if and .Values.authentication.ca.useExternal (not .Values.authentication.ca.externalSecretName) }}
{{- fail "When using external ca secret the value for .Values.authentication.ca.externalSecretName should be set" }}
{{- end }}
{{- end }}

{{- if .Values.authentication.ssl.enabled }}
{{- if and .Values.authentication.ssl.useExternal (not .Values.authentication.ssl.externalSecretName) }}
{{- fail "When using external ssl secret the value for .Values.authentication.ssl.externalSecretName should be set" }}
{{- end }}
{{- end }}

apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "task-liberator.environment" . }}
    release: {{ $releaseName }}
    {{- include "task-liberator.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.cron.schedule | quote }}
  successfulJobsHistoryLimit: {{ .Values.cron.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cron.failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .Values.cron.concurrencyPolicy }}
  jobTemplate:
    spec:
      template:
        spec:
          {{- if $cloudProviderImagePullSecretName }}
          imagePullSecrets:
            - name: {{ $cloudProviderImagePullSecretName | quote }}
          {{- end }}
          volumes:
          {{- if .Values.authentication.ca.enabled }}
          - name: root-ca
            secret:
              secretName: {{ $caSecretName }}
          {{- end }}
          {{- if .Values.authentication.ssl.enabled }}
          - name: open-ssl
            secret:
              secretName: {{ $sslSecretName }}
          {{- end }}
          restartPolicy: {{ .Values.cron.restartPolicy }}
          containers:
            - name: {{ $releaseName }}-{{ $chartName }}-deployment
              {{- with .Values.image }}
              image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ .tag  }}
              {{- end }}
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                {{- if .Values.authentication.ca.enabled }}
                - name: REQUESTS_CA_BUNDLE
                  value: "/usr/local/share/ca-certificates/ca.crt"
                - name: NODE_EXTRA_CA_CERTS
                  value: "[/usr/local/share/ca-certificates/ca.crt]"
                {{- end }}
              envFrom:
                - configMapRef:
                    name: {{ $releaseName }}-{{ $chartName }}-configmap
              volumeMounts: 
                {{- if .Values.authentication.ca.enabled }}
                - name: root-ca
                  mountPath: "/usr/local/share/ca-certificates"
                {{- end }}
                {{- if .Values.authentication.ssl.enabled }}
                - name: open-ssl
                  mountPath: "/etc/ssl/etc/ssl/openssl.cnf"
                  subPath: "openssl.cnf"
                {{- end }}
              {{- if .Values.resources.enabled }}
              resources:
                {{- toYaml .Values.resources.value | nindent 16 }}
              {{- end }}
{{- end -}}
